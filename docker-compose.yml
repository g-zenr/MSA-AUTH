services:
    # Production service
    app:
        build:
            context: .
            dockerfile: Dockerfile
            target: runner
        container_name: 1bis-api-app
        ports:
            - "3000:3000"
        environment:
            - NODE_ENV=production
            - PORT=3000
            - DATABASE_URL=${DATABASE_URL}
            - JWT_SECRET=${JWT_SECRET}
            - CORS_ORIGINS=${CORS_ORIGINS}
            - CORS_CREDENTIALS=${CORS_CREDENTIALS:-true}
            - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
            - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
            - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
            - BETTER_STACK_SOURCE_TOKEN=${BETTER_STACK_SOURCE_TOKEN}
            - BETTER_STACK_HOST=${BETTER_STACK_HOST}
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD",
                    "node",
                    "-e",
                    "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        networks:
            - 1bis-network
        volumes:
            - ./logs:/app/logs
            - ./assets:/app/assets
        deploy:
            resources:
                limits:
                    memory: 1G
                    cpus: "0.5"
                reservations:
                    memory: 512M
                    cpus: "0.25"

    # Development service with hot reload
    app-dev:
        build:
            context: .
            dockerfile: Dockerfile
            target: builder
        container_name: 1bis-api-app-dev
        ports:
            - "3001:3000"
        environment:
            - NODE_ENV=development
            - PORT=3000
            - DATABASE_URL=${DATABASE_URL}
            - JWT_SECRET=${JWT_SECRET}
            - CORS_ORIGINS=${CORS_ORIGINS}
            - CORS_CREDENTIALS=${CORS_CREDENTIALS:-true}
            - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
            - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
            - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
            - BETTER_STACK_SOURCE_TOKEN=${BETTER_STACK_SOURCE_TOKEN}
            - BETTER_STACK_HOST=${BETTER_STACK_HOST}
        restart: unless-stopped
        volumes:
            - ./app:/app/app
            - ./config:/app/config
            - ./helper:/app/helper
            - ./middleware:/app/middleware
            - ./utils:/app/utils
            - ./zod:/app/zod
            - ./prisma:/app/prisma
            - ./generated:/app/generated
            - ./assets:/app/assets
            - ./index.ts:/app/index.ts
            - ./logs:/app/logs
            - /app/node_modules
        command: ["npm", "run", "dev"]
        networks:
            - 1bis-network
        profiles:
            - dev

    # MongoDB service (if using local database)
    database:
        image: mongo:7.0
        container_name: 1bis-database
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
            - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-1bis_db}
        ports:
            - "27017:27017"
        volumes:
            - mongodb_data:/data/db
            - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
        networks:
            - 1bis-network
        profiles:
            - dev
            - local-db

    # Prisma Studio service for database management
    prisma-studio:
        build:
            context: .
            dockerfile: Dockerfile
            target: builder
        container_name: 1bis-prisma-studio
        ports:
            - "5555:5555"
        environment:
            - DATABASE_URL=${DATABASE_URL}
        command: ["npx", "prisma", "studio", "--hostname", "0.0.0.0"]
        networks:
            - 1bis-network
        profiles:
            - dev
            - prisma

    # Nginx reverse proxy for production
    nginx:
        image: nginx:alpine
        container_name: 1bis-nginx
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./ssl:/etc/nginx/ssl:ro
        depends_on:
            app:
                condition: service_healthy
        networks:
            - 1bis-network
        profiles:
            - production

networks:
    1bis-network:
        driver: bridge

volumes:
    mongodb_data:
        driver: local
    logs:
        driver: local
