export const config = {
	ERROR: {
		USER: {
			NOT_FOUND: "User not found",
			INVALID_ID: "Invalid user ID",
			MISSING_ID: "Missing user ID",
			USER_ID_REQUIRED: "User ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_USER: "Error getting user",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update user",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			INVALID_EMAIL: "Invalid email format",
			EMAIL_ALREADY_EXISTS: "Email already exists",
			EMAIL_ALREADY_IN_USED: "Email already in use",
			ERROR_UPDATING_USER: "Error updating user",
			ERROR_DELETING_USER: "Error deleting user",
			INVALID_USER_ID_FORMAT: "Invalid user ID format",
			INVALID_FIELDS_PARAMETER: "Invalid fields parameter",
			INVALID_QUERY_PARAMETERS: "Invalid query parameters",
			INVALID_UPDATE_DATA: "Invalid update data",
			REQUEST_BODY_EMPTY: "Request body cannot be empty",
			VALIDATION_FAILED: "Validation failed",
			FIRST_NAME_REQUIRED: "First name is required",
			LAST_NAME_REQUIRED: "Last name is required",
			UNAUTHORIZED_USER_ID_NOT_FOUND: "Unauthorized - User ID not found",
			ERROR_DURING_USER_CREATION: "Error during user creation",
			FAILED_TO_CREATE_OR_FIND_PERSON: "Failed to create or find person",
			UPLOADING_AVATAR: "Uploading avatar for user",
			AVATAR_UPLOADED: "Avatar uploaded successfully",
			ORGANIZATION_VERIFIED: "Organization verified",
			USER_ALREADY_EXISTS: "User already exists",
		},
		AUTH: {
			UNAUTHORIZED: "Unauthorized",
			INVALID_TOKEN: "Invalid token",
			REGISTRATION_VALIDATION_FAILED: "Registration validation failed",
			LOGIN_VALIDATION_FAILED: "Login validation failed",
			PASSWORD_UPDATE_VALIDATION_FAILED: "Password update validation failed",
			FIRST_NAME_LAST_NAME_REQUIRED: "First name and last name are required",
			INVALID_ORGANIZATION_ID_FORMAT: "Invalid organization ID format",
			ORGANIZATION_NOT_FOUND: "Organization not found",
			USER_ALREADY_EXISTS: "User already exists",
			ERROR_DURING_REGISTRATION: "Error during registration",
			INVALID_CREDENTIALS: "Invalid credentials",
			ERROR_DURING_LOGIN: "Error during login",
			USER_ID_PASSWORD_REQUIRED: "User ID and new password are required",
			PASSWORD_MIN_LENGTH: "Password must be at least 6 characters long",
			ERROR_UPDATING_PASSWORD: "Error updating password",
			USER_NOT_FOUND: "User not found",
			REGISTRATION_SUCCESSFUL: "Registration successful",
			LOGGED_IN_SUCCESSFULLY: "Logged in successfully",
			PASSWORD_UPDATED_SUCCESSFULLY: "Password updated successfully",
			FAILED_TO_CREATE_OR_FIND_PERSON: "Failed to create or find person",
			ORGANIZATION_VERIFIED: "Organization verified",
			TOKEN_GENERATED: "Token generated successfully",
			USER_LOGGED_IN: "User logged in successfully",
		},
		IMAGE: {
			NO_IMAGE_PROVIDED: "No image provided",
			UPLOAD_FAILED: "Image upload failed",
			PUBLIC_ID_REQUIRED: "Public ID is required",
			NOT_FOUND: "Image not found",
			DELETE_FAILED: "Image deletion failed",
			PUBLIC_IDS_REQUIRED: "Public IDs are required",
			TRANSFORM_FAILED: "Image transformation failed",
		},
		PERSON: {
			NOT_FOUND: "Person not found",
			INVALID_ID: "Invalid person ID",
			MISSING_ID: "Missing person ID",
			USER_ID_REQUIRED: "Person ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_USER: "Error getting person",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update person",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			INVALID_EMAIL: "Invalid email format",
			EMAIL_ALREADY_EXISTS: "Email already exists",
			EMAIL_ALREADY_IN_USED: "Email already in use",
			ERROR_UPDATING_USER: "Error updating person",
			ERROR_DELETING_USER: "Error deleting person",
			GETTING_ALL_USERS: "Getting all persons",
		},
	},
	SUCCESS: {
		USER: {
			RETRIEVED: "User retrieved successfully",
			DELETED: "User deleted",
			SOFT_DELETING: "Soft deleting user",
			UPDATE: "User updated",
			CREATED: "User created",
			LOGGED_IN: "User logged in",
			GETTING_USER_BY_ID: "Getting user by ID",
			GETTING_ALL_USERS: "Getting all users",
			LOGOUT_SUCCESSFUL: "Logout successful",
			PASSWORD_RESET_EMAIL_SENT: "Password reset email sent",
			PASSWORD_RESET_SUCCESSFUL: "Password reset successful",
			USER_UPDATED_SUCCESSFULLY: "User updated successfully",
			USERS_RETRIEVED_SUCCESSFULLY: "Users retrieved successfully",
			CURRENT_USER_RETRIEVED_SUCCESSFULLY: "Current user retrieved successfully",
			USER_CREATED_SUCCESSFULLY: "User created successfully",
		},
		AUTH: {
			REGISTRATION_SUCCESSFUL: "Registration successful",
			LOGGED_IN_SUCCESSFULLY: "Logged in successfully",
			PASSWORD_UPDATED_SUCCESSFULLY: "Password updated successfully",
			USER_CREATED: "User created successfully",
			TOKEN_GENERATED: "Token generated successfully",
			ORGANIZATION_VERIFIED: "Organization verified successfully",
			USER_LOGGED_IN: "User logged in successfully",
		},
		PERSON: {
			RETRIEVED: "Person retrieved",
			DELETED: "Person deleted",
			SOFT_DELETING: "Soft deleting user",
			UPDATE: "Person updated",
			CREATED: "Person created",
			LOGGED_IN: "Person logged in",
			GETTING_USER_BY_ID: "Getting person by ID",
			GETTING_ALL_USERS: "Getting all persons",
		},
		IMAGE: {
			UPLOADED: "Image uploaded successfully",
			MULTIPLE_UPLOADED: "images uploaded successfully",
			DELETED: "Image deleted successfully",
			DELETION_COMPLETED: "Deletion completed",
			TRANSFORMED: "Image transformed successfully",
		},
	},
	INFO: {
		USER: {
			REGISTERING_USER: "Registering user with email:",
			CREATING_USER_WITH_PERSON_ID: "Creating user with personId:",
			LOGGING_IN_USER: "Logging in user with email:",
		},
	},
	COMMON: {
		UNLOCK_RECORDS: "unlock records",
		SIZE: "size",
		PAGE: "page",
		QUERY: "query",
		FILTER: "filter",
		ORDER: "order",
		STATUS: "status",
		RESPONSE: "response",
		FROM: "from",
		WITH: "with",
		TO: "to",
		FOR: "for",
		ACTION: "action",
		// Common field names
		ID: "id",
		EMAIL: "email",
		FIRST_NAME: "firstName",
		LAST_NAME: "lastName",
		ORGANIZATION_ID: "organizationId",
		USER_ID: "userId",
		BODY: "body",
		FIELDS: "fields",
		// Common resource names
		USER: "User",
		ORGANIZATION: "Organization",
		// Common values
		USERS: "users",
		AVATARS: "avatars",
		AUTO: "auto",
		AVATAR: "avatar",
		EMAIL_METHOD: "email",
		// HTTP methods
		GET: "GET",
		POST: "POST",
		PUT: "PUT",
		DELETE: "DELETE",
		PATCH: "PATCH",
		// Common parameters
		START_DATE: "startDate",
		END_DATE: "endDate",
		ORDER_BY: "orderBy",
		DESC: "desc",
		// Common error codes
		UNAUTHORIZED: "UNAUTHORIZED",
		INTERNAL_SERVER_ERROR: "Internal server error",
		// Cookie settings
		TOKEN: "token",
		NONE: "none",
		LAX: "lax",
		PRODUCTION: "production",
	},
	ACTION: {
		CREATE: "create",
		READ: "read",
		UPDATE: "update",
		DELETE: "delete",
		CUSTOM: "custom",
	},
};
