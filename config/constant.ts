export const config = {
	ERROR: {
		USER: {
			NOT_FOUND: "User not found",
			INVALID_ID: "Invalid user ID",
			MISSING_ID: "Missing user ID",
			USER_ID_REQUIRED: "User ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_USER: "Error getting user",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update user",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			INVALID_EMAIL: "Invalid email format",
			EMAIL_ALREADY_EXISTS: "Email already exists",
			EMAIL_ALREADY_IN_USED: "Email already in use",
			ERROR_UPDATING_USER: "Error updating user",
			ERROR_DELETING_USER: "Error deleting user",
			INVALID_USER_ID_FORMAT: "Invalid user ID format",
			INVALID_FIELDS_PARAMETER: "Invalid fields parameter",
			INVALID_QUERY_PARAMETERS: "Invalid query parameters",
			INVALID_UPDATE_DATA: "Invalid update data",
			REQUEST_BODY_EMPTY: "Request body cannot be empty",
			VALIDATION_FAILED: "Validation failed",
			FIRST_NAME_REQUIRED: "First name is required",
			LAST_NAME_REQUIRED: "Last name is required",
			UNAUTHORIZED_USER_ID_NOT_FOUND: "Unauthorized - User ID not found",
			ERROR_DURING_USER_CREATION: "Error during user creation",
			FAILED_TO_CREATE_OR_FIND_PERSON: "Failed to create or find person",
			UPLOADING_AVATAR: "Uploading avatar for user",
			AVATAR_UPLOADED: "Avatar uploaded successfully",
			ORGANIZATION_VERIFIED: "Organization verified",
			USER_ALREADY_EXISTS: "User already exists",
		},
		APP: {
			MISSING_ID: "Missing app ID",
			ID_REQUIRED: "App ID is required",
			FIELDS_MUST_BE_STRING: "Fields parameter must be a comma-separated string",
			NOT_FOUND: "App not found",
			ERROR_GETTING: "Error getting app",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_ALL: "Error getting all apps",
			NAME_REQUIRED: "App name is required",
			DESCRIPTION_REQUIRED: "App description is required",
			CODE_REQUIRED: "App code is required",
			NAME_OR_CODE_EXISTS: "App with this name or code already exists",
			ERROR_CREATING: "Error creating app",
			NO_UPDATE_FIELDS: "No update fields provided",
			ERROR_UPDATING: "Error updating app",
			ERROR_DELETING: "Error deleting app",
		},
		ORGANIZATION: {
			NOT_FOUND: "Organization not found",
			INVALID_ID: "Invalid organization ID",
			MISSING_ID: "Missing organization ID",
			ID_REQUIRED: "Organization ID is required",
			FIELDS_MUST_BE_STRING: "Fields parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_ORGANIZATION: "Error getting organization",
			NAME_EXISTS: "Organization with this name already exists",
			CODE_EXISTS: "Organization with this code already exists",
			NO_UPDATE_FIELDS: "No update fields or files provided",
			APP_ID_IS_REQUIRED: "App ID is required",
			MODULE_IDS_REQUIRED: "Module IDs are required",
			APP_NOT_FOUND_GENERIC: "App not found",
			MODULES_NOT_FOUND_OR_NOT_BELONG_TO_APP:
				"Some modules not found or don't belong to the app",
			MODULES_EXIST_IN_APP: "All specified modules already exist in the app",
			USER_ID_NOT_FOUND_IN_TOKEN: "User ID not found in token",
			ACCESS_DENIED_ADMIN_REQUIRED: "Access denied. Admin role required.",
			USER_NOT_FOUND: "User not found",
			USER_NOT_IN_ORGANIZATION: "User does not belong to any organization",
			NO_APPS_IN_ORGANIZATION: "No apps found for organization",
			APP_NOT_IN_ORGANIZATION: "App not found for organization",
			INSUFFICIENT_PERMISSIONS: "Insufficient permissions",
			APP_ID_REQUIRED: "Organization ID and App ID are required",
			APP_NOT_FOUND: "App not found in organization",
			ERROR_UPDATING_APP: "Error updating organization app",
			ERROR_REMOVING_APP: "Error removing organization app",
			MODULE_ID_REQUIRED: "Organization ID, App ID, and Module ID are required",
			MODULE_NOT_FOUND: "Module not found in app",
			ERROR_REMOVING_MODULE: "Error removing module from app",
			ERROR_UPDATING_MODULE: "Error updating module in app",
			DATA_MUST_BE_OBJECT: "Data must be an object",
			NAME_REQUIRED: "Organization name is required",
			DESCRIPTION_REQUIRED: "Organization description is required",
			CODE_REQUIRED: "Organization code is required",
			NAME_NON_EMPTY: "Organization name cannot be empty",
			DESCRIPTION_NON_EMPTY: "Organization description cannot be empty",
			CODE_NON_EMPTY: "Organization code cannot be empty",
			INVALID_COLOR_FORMAT: "has an invalid color format",
		},
		PERSON: {
			NOT_FOUND: "Person not found",
			INVALID_ID: "Invalid person ID",
			MISSING_ID: "Missing person ID",
			USER_ID_REQUIRED: "Person ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_USER: "Error getting person",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update person",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			INVALID_EMAIL: "Invalid email format",
			EMAIL_ALREADY_EXISTS: "Email already exists",
			EMAIL_ALREADY_IN_USED: "Email already in use",
			ERROR_UPDATING_USER: "Error updating person",
			ERROR_DELETING_USER: "Error deleting person",
			GETTING_ALL_USERS: "Getting all persons",
		},
		ROOMTYPE: {
			NOT_FOUND: "Room type not found",
			INVALID_ID: "Invalid room type ID",
			MISSING_ID: "Missing room type ID",
			ID_REQUIRED: "Room type ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING: "Error getting room type",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update room type",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			ERROR_UPDATING: "Error updating room type",
			ERROR_DELETING: "Error deleting room type",
			NAME_REQUIRED: "Room type name is required",

			BED_TYPE_REQUIRED: "Bed type is required",
			BED_COUNT_REQUIRED: "Bed count is required",
			MAX_OCCUPANCY_REQUIRED: "Max occupancy is required",
			ORGANIZATION_ID_REQUIRED: "Organization ID is required",
			EXISTING_ROOMTYPE: "Room type already exists",
			ERROR_CREATING: "Error creating room type",
			GETTING_ALL: "Getting all room types",
		},
		CLIENT: {
			NOT_FOUND: "Client not found",
			INVALID_ID: "Invalid client ID",
			MISSING_ID: "Missing client ID",
			USER_ID_REQUIRED: "Client ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_USER: "Error getting client",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update client",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			INVALID_EMAIL: "Invalid email format",
			EMAIL_ALREADY_EXISTS: "Email already exists",
			EMAIL_ALREADY_IN_USED: "Email already in use",
			ERROR_UPDATING_USER: "Error updating client",
			ERROR_DELETING_USER: "Error deleting client",
			INVALID_USER_DATA: "Invalid user data provided for client",
			TIN: "TIN and business style are required",
			EXISTING_CLIENT: "Client already exists",
			GETTING_ALL_USERS: "Getting all clients",
		},
		VENDOR: {
			NOT_FOUND: "Vendor not found",
			INVALID_ID: "Invalid vendor ID",
			MISSING_ID: "Missing vendor ID",
			USER_ID_REQUIRED: "Vendor ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_USER: "Error getting vendor",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update vendor",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			INVALID_EMAIL: "Invalid email format",
			EMAIL_ALREADY_EXISTS: "Email already exists",
			EMAIL_ALREADY_IN_USED: "Email already in use",
			ERROR_UPDATING_USER: "Error updating vendor",
			ERROR_DELETING_USER: "Error deleting vendor",
			INVALID_USER_DATA: "Invalid user data provided for vendor",
			TIN: "TIN and business style are required",
			EXISTING_CLIENT: "Client already exists",
			GETTING_ALL_USERS: "Getting all vendors",
		},
		REFERRER: {
			NOT_FOUND: "Referrer not found",
			INVALID_ID: "Invalid referrer ID",
			MISSING_ID: "Missing referrer ID",
			USER_ID_REQUIRED: "Referrer ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_USER: "Error getting referrer",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update referrer",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			ERROR_UPDATING_USER: "Error updating referrer",
			ERROR_DELETING_USER: "Error deleting referrer",
			INVALID_USER_DATA: "Invalid user data provided for referrer",
			EXISTING_REFERRER: "Referrer already exists",
			INVALID_CODE: "Invalid referrer code",
			CODE_REQUIRED: "Referrer code is required",
			GETTING_ALL_USERS: "Getting all referrers",
		},
		TTLOCK: {
			ERROR: {
				invalidAction:
					"Invalid action parameter. Must be one of: details, battery, passageMode",
				NO_RESPONSE: "No response from TTLock API",
				INVALID_ACTION_SPECIFIED: "Invalid action specified",
				INVALID_RESPONSE: "Invalid response format",
				INVALID_RESPONSE_FORMAT_UNLOCK_RECORDS:
					"Invalid response format for unlock records",
				GET_ALL_INVALID_ACTION:
					"Invalid action parameter. Must be one of: locklist, passcodes, listuser",
				ERROR_USER_GET: "Error getting TTLock users:",
				ERROR_USER_CREATE: "Error creating TTLock user:",
				ERROR_USER_LOGIN: "Error logging in TTLock user:",
				ERROR_USER_RESET_PASSWORD: "Error resetting password for TTLock user:",
				ERROR_USER_DELETE: "Error deleting TTLock user:",
				ERROR_GET_UNLOCK_RECORDS: "Error getting unlock records:",
				ERROR_UPLOAD_UNLOCK_RECORDS: "Error uploading unlock records:",
				ERROR_DELETE_UNLOCK_RECORDS: "Error deleting unlock records:",
				ERROR_CLEAR_UNLOCK_RECORDS: "Error clearing unlock records:",
				FAILED_TO_LIST_QR_CODES: "Failed to list QR codes for lock:",
				ERROR_LISTING_QR_CODES: "Error listing QR codes:",
				FAILED_TO_ADD_QR_CODE: "Failed to add QR code for lock ",
				ERROR_ADDING_QR_CODE: "Error adding QR code:",
				FAILED_TO_GET_QR_CODE_DATA: "Failed to get QR code data for ID:",
				ERROR_GETTING_QR_CODE_DATA: "Error getting QR code data:",
				FAILED_TO_DELETE_QR_CODE: "Failed to delete QR code ID ",
				ERROR_DELETING_QR_CODE: "Error deleting QR code:",
				FAILED_TO_CLEAR_QR_CODES: "Failed to clear QR codes for lock:",
				ERROR_CLEARING_QR_CODES: "Error clearing QR codes:",
				FAILED_TO_UPDATE_QR_CODE: "Failed to update QR code ID:",
				ERROR_UPDATING_QR_CODE: "Error updating QR code:",
				FAILED_TO_GET_PASSCODES: "Failed to retrieve passcodes for lock:",
				ERROR_GETTING_PASSCODES: "Error getting passcodes:",
				FAILED_TO_GENERATE_PASSCODE: "Failed to generate random passcode for lock:",
				ERROR_GENERATING_PASSCODE: "Error generating random passcode:",
				FAILED_TO_DELETE_PASSCODE: "Failed to delete passcode ID:",
				ERROR_DELETING_PASSCODE: "Error deleting passcode:",
				FAILED_TO_CHANGE_PASSCODE: "Failed to change passcode ID:",
				ERROR_CHANGING_PASSCODE: "Error changing passcode:",
				FAILED_TO_ADD_PASSCODE: "Failed to add new passcode for lock:",
				ERROR_ADDING_PASSCODE: "Error adding passcode:",
				FAILED_TO_INITIALIZE_LOCK: "Failed to initialize lock:",
				ERROR_INITIALIZING_LOCK: "Error initializing lock:",
				FAILED_TO_GET_LOCK: "Failed to get lock details:",
				ERROR_GETTING_LOCK: "Error getting lock details:",
				FAILED_TO_GET_ALL_LOCKS: "Failed to get all locks:",
				ERROR_GETTING_ALL_LOCKS: "Error getting all locks:",
				FAILED_TO_LOCK: "Failed to perform lock action:",
				ERROR_LOCKING: "Error performing lock action:",
				FAILED_TO_UPDATE_LOCK: "Failed to update lock:",
				ERROR_UPDATING_LOCK: "Error updating lock:",
				FAILED_TO_DELETE_LOCK: "Failed to delete lock:",
				ERROR_DELETING_LOCK: "Error deleting lock:",
				FAILED_TO_DELETE_ALL_LOCKS: "Failed to delete all locks:",
				ERROR_DELETING_ALL_LOCKS: "Error deleting all locks:",
				FAILED_TO_CONFIG_PASSAGE_MODE: "Failed to configure passage mode:",
				ERROR_CONFIGURING_PASSAGE_MODE: "Error configuring passage mode:",
				FAILED_TO_ADD_IC_CARD: "Failed to add IC card",
				ERROR_ADDING_IC_CARD: "Error adding IC card",
				FAILED_TO_GET_IC_CARD_LIST: "Failed to get IC card list",
				ERROR_GETTING_IC_CARD_LIST: "Error getting IC card list",
				FAILED_TO_DELETE_IC_CARD: "Failed to delete IC card",
				ERROR_DELETING_IC_CARD: "Error deleting IC card",
				FAILED_TO_CLEAR_IC_CARDS: "Failed to clear IC cards",
				ERROR_CLEARING_IC_CARDS: "Error clearing IC cards",
				FAILED_TO_UPDATE_IC_CARD: "Failed to update IC card",
				ERROR_UPDATING_IC_CARD: "Error updating IC card",
				// Group Errors
				FAILED_TO_ADD_GROUP: "Failed to add group",
				ERROR_ADDING_GROUP: "Error adding group",
				FAILED_TO_GET_GROUP_LIST: "Failed to get group list",
				ERROR_GETTING_GROUP_LIST: "Error getting group list",
				FAILED_TO_UPDATE_GROUP: "Failed to update group",
				ERROR_UPDATING_GROUP: "Error updating group",
				FAILED_TO_DELETE_GROUP: "Failed to delete group",
				ERROR_DELETING_GROUP: "Error deleting group",
				FAILED_TO_SET_LOCK_GROUP: "Failed to set lock to group",
				ERROR_SETTING_LOCK_GROUP: "Error setting lock to group",
				// Gateway Errors
				FAILED_TO_INITIALIZE_GATEWAY: "Failed to initialize gateway",
				ERROR_INITIALIZING_GATEWAY: "Error initializing gateway",
				FAILED_TO_GET_ALL_GATEWAYS: "Failed to get all gateways",
				ERROR_GETTING_ALL_GATEWAYS: "Error getting all gateways",
				FAILED_TO_DELETE_GATEWAY: "Failed to delete gateway",
				ERROR_DELETING_GATEWAY: "Error deleting gateway",
				FAILED_TO_GET_GATEWAY: "Failed to get gateway details",
				ERROR_GETTING_GATEWAY: "Error getting gateway details",
				FAILED_TO_UPDATE_GATEWAY: "Failed to update gateway",
				ERROR_UPDATING_GATEWAY: "Error updating gateway",
				FAILED_TO_UPLOAD_GATEWAY_DETAILS: "Failed to upload gateway details",
				ERROR_UPLOADING_GATEWAY_DETAILS: "Error uploading gateway details",
				FAILED_TO_GET_FINGERPRINT_LIST: "Failed to get fingerprint list",
				ERROR_GETTING_FINGERPRINT_LIST: "Error getting fingerprint list",
				FAILED_TO_ADD_FINGERPRINT: "Failed to add fingerprint",
				ERROR_ADDING_FINGERPRINT: "Error adding fingerprint",
				FAILED_TO_DELETE_FINGERPRINT: "Failed to delete fingerprint",
				ERROR_DELETING_FINGERPRINT: "Error deleting fingerprint",
				FAILED_TO_CLEAR_FINGERPRINTS: "Failed to clear fingerprints",
				ERROR_CLEARING_FINGERPRINTS: "Error clearing fingerprints",
				FAILED_TO_UPDATE_FINGERPRINT: "Failed to update fingerprint",
				ERROR_UPDATING_FINGERPRINT: "Error updating fingerprint",
				INVALID_FINGERPRINT_ACTION: "Invalid fingerprint action",
				FAILED_TO_SEND_EKEY: "Failed to send ekey",
				ERROR_SENDING_EKEY: "Error sending ekey",
				FAILED_TO_DELETE_EKEY: "Failed to delete ekey",
				ERROR_DELETING_EKEY: "Error deleting ekey",
				FAILED_TO_LIST_EKEYS: "Failed to list ekeys",
				ERROR_LISTING_EKEYS: "Error listing ekeys",
				FAILED_TO_GET_EKEY: "Failed to get ekey",
				ERROR_GETTING_EKEY: "Error getting ekey",
				FAILED_TO_GET_LOCK_EKEY: "Failed to get lock ekey",
				ERROR_GETTING_LOCK_EKEY: "Error getting lock ekey",
				FAILED_TO_UPDATE_EKEY: "Failed to update ekey",
				ERROR_UPDATING_EKEY: "Error updating ekey",
				FAILED_TO_ADD_DOOR_SENSOR: "Failed to add door sensor",
				ERROR_ADDING_DOOR_SENSOR: "Error adding door sensor",
				FAILED_TO_QUERY_DOOR_SENSOR: "Failed to query door sensor",
				ERROR_QUERYING_DOOR_SENSOR: "Error querying door sensor",
				FAILED_TO_DELETE_DOOR_SENSOR: "Failed to delete door sensor",
				ERROR_DELETING_DOOR_SENSOR: "Error deleting door sensor",
				FAILED_TO_RENAME_DOOR_SENSOR: "Failed to rename door sensor",
				ERROR_RENAMING_DOOR_SENSOR: "Error renaming door sensor",
				ERROR_QUERYING_LOCK_STATE: "Error querying lock state:",
				ERROR_GETTING_GATEWAY_LIST_BY_LOCK: "Error getting gateway list by lock",
				ERROR_GETTING_PASSAGE_MODE_CONFIG: "Error getting passage mode configuration",
				ERROR_UPDATING_LOCK_SETTING: "Error updating lock setting",
				ERROR_QUERYING_LOCK_SETTING: "Error querying lock setting",
			},
			ERROR_CODES: {
				[0]: 200, // Success response
				[1]: 400, // Failed or means no
				[-2018]: 403, // Permission Denied
				[-2001]: 401, // Invalid Access Token
				[-2002]: 400, // Invalid Parameter
				[-2003]: 404, // Resource Not Found
				[-2005]: 429, // Rate Limit Exceeded
				[-3]: 400, // Invalid Parameter
				[10000]: 401, // Invalid client_id
				[10001]: 401, // Invalid client
				[10003]: 401, // Invalid token
				[10004]: 401, // Invalid grant
				[10007]: 401, // Invalid account/password
				[10011]: 401, // Invalid refresh_token
				[20002]: 403, // Not lock admin
				[30002]: 400, // Invalid username format
				[30003]: 409, // Existing registered users
				[30004]: 400, // Invalid userid to delete
				[30005]: 400, // Password must be md5 encrypted
				[30006]: 429, // API call limit exceeded
				[80000]: 400, // Date must be current time, within 5 minutes
				[80002]: 400, // Invalid json format
				[-1003]: 404, // Lock does not exist
				[-2025]: 403, // Frozen lock
				[-3011]: 400, // Cannot transfer lock to self
				[-4043]: 400, // Function not supported
				[-4056]: 500, // Out of memory
				[-4067]: 400, // NB Device is not registered
				[-4082]: 400, // Auto locking period invalid
				[-4063]: 400, // Please delete/transfer all yours locks first
				[-1008]: 404, // eKey does not exist
				[-1016]: 409, // An identical Name exists
				[-1018]: 404, // This Group does not exist
				[-1027]: 400, // Can't send eKey to account bound to another account
				[-2019]: 400, // Cannot send eKey to self
				[-2020]: 400, // Cannot send eKey to admin
				[-2023]: 400, // Can't change the time period now
				[-4064]: 400, // eKey only for registered accounts
				[-1007]: 404, // No password data
				[-2009]: 400, // Invalid password
				[-3006]: 400, // Invalid passcode length
				[-3007]: 409, // Same passcode already exists
				[-3008]: 400, // Passcode never used cannot be changed
				[-3009]: 400, // No space for new passcodes
				[-2012]: 400, // Lock not connected to gateway
				[-3002]: 503, // Gateway offline
				[-3003]: 503, // Gateway busy
				[-3016]: 400, // Cannot Transfer Gateway to self
				[-3034]: 400, // Network not configured
				[-3035]: 400, // Wifi lock in power saving mode
				[-3036]: 503, // Lock offline
				[-3037]: 503, // Lock busy
				[-4037]: 404, // Gateway does not exist
				[-1021]: 404, // IC card does not exist
				[-1023]: 404, // Fingerprint does not exist
				[90000]: 500, // Internal server error
			} as Record<number, number>,
			EKEY_STATUS: {
				110401: "Normal",
				110402: "Pending",
				110405: "Freezed",
				110408: "Deleted",
				110410: "Reseted",
			} as Record<number, string>,
			RECORD_TYPE: {
				1: "Unlock by app",
				4: "Unlock by passcode",
				5: "Rise the lock (parking lock)",
				6: "Lower the lock (parking lock)",
				7: "Unlock by IC card",
				8: "Unlock by fingerprint",
				9: "Unlock by wrist strap",
				10: "Unlock by mechanical key",
				11: "Lock by app",
				12: "Unlock by gateway",
				29: "Force applied on lock",
				30: "Door sensor closed",
				31: "Door sensor open",
				32: "Open from inside",
				33: "Lock by fingerprint",
				34: "Lock by passcode",
				35: "Lock by IC card",
				36: "Lock by mechanical key",
				37: "APP button control",
				42: "Received new local mail",
				43: "Received new other cities' mail",
				44: "Tamper alert",
				45: "Auto lock",
				46: "Unlock by unlock key",
				47: "Lock by lock key",
				48: "System locked",
				49: "Unlock by hotel card",
				50: "Unlocked due to high temperature",
				51: "Attempted use of deleted card",
				52: "Dead lock with APP",
				53: "Dead lock with passcode",
				54: "Car left (parking lock)",
				55: "Remote control operation",
				57: "QR code unlock successful",
				58: "QR code unlock expired",
				59: "Double locked",
				60: "Cancel double lock",
				61: "QR code lock successful",
				62: "QR code lock failed (double locked)",
				63: "Auto unlock at passage mode",
				64: "Door unclosed alarm",
				65: "Failed to unlock",
				66: "Failed to lock",
				67: "Face unlock successful",
				68: "Face unlock failed - door locked from inside",
				69: "Lock with face",
				71: "Face unlock failed - expired or ineffective",
				75: "Unlocked by App granting",
				76: "Unlocked by remote granting",
				77: "Dual auth: Bluetooth verification waiting",
				78: "Dual auth: Password verification waiting",
				79: "Dual auth: Fingerprint verification waiting",
				80: "Dual auth: IC card verification waiting",
				81: "Dual auth: Face verification waiting",
				82: "Dual auth: Wireless key verification waiting",
				83: "Dual auth: Palm vein verification waiting",
				84: "Palm vein unlock successful",
				85: "Palm vein unlock successful",
				86: "Lock with palm vein",
				88: "Palm vein unlock failed - expired",
				91: "Failed to unlock with IC card",
				92: "Administrator password unlock",
			} as Record<number, string>,
			RECORD_TYPE_FROM_LOCK: {
				1: "Unlock by Bluetooth",
				4: "Unlock by passcode success",
				5: "Modify a passcode on the lock",
				6: "Delete a passcode on the lock",
				7: "Unlock by passcode failed—unknown passcode",
				8: "Clear passcodes from the lock",
				9: "Passcode be squeezed out",
				10: "Unlock with passcode with delete function",
				11: "Unlock by passcode failed—passcode expired",
				12: "Unlock by passcode failed—run out of memory",
				13: "Unlock by passcode failed—passcode is in blacklist",
				14: "Lock power on",
				15: "Add card success",
				16: "Clear cards",
				17: "Unlock by card success",
				18: "Delete an card",
				19: "Unlock by wrist strap success",
				20: "Unlock by fingerprint success",
				21: "Add fingerprint",
				22: "Unlock by fingerprint failed—fingerprint expired",
				23: "Delete a fingerprint",
				24: "Clear fingerprints",
				25: "Unlock by card failed—card expired",
				26: "Lock by Bluetooth",
				27: "Unlock by Mechanical key",
				28: "Unlock by gateway",
				29: "Apply some force on the Lock",
				30: "Door sensor closed",
				31: "Door sensor open",
				32: "Open from inside",
				33: "Lock by fingerprint",
				34: "Lock by passcode",
				35: "Lock by card",
				36: "Lock by Mechanical key",
				37: "Use APP button to control the lock",
				38: "Unlock by passcode failed—The door has been double locked",
				39: "Unlock by IC card failed—The door has been double locked",
				40: "Unlock by fingerprint failed—The door has been double locked",
				41: "Unlock by app failed—The door has been double locked",
				42: "Received new local mail",
				43: "Received new other cities' mail",
				44: "Tamper alert",
				45: "Auto Lock",
				46: "Unlock by unlock key",
				47: "Lock by lock key",
				48: "System locked",
				49: "Unlock by hotel card",
				50: "Unlocked due to the high temperature",
				51: "Unlock by card failed—card in blacklist",
				52: "Dead lock with APP",
				53: "Dead lock with passcode",
				54: "The car left (for parking lock)",
				55: "Use remote control lock or unlock lock",
				57: "Unlock with QR code success",
				58: "Unlock with QR code failed, it's expired",
				59: "Double locked",
				60: "Cancel double lock",
				61: "Lock with QR code success",
				62: "Lock with QR code failed, the lock is double locked",
				63: "Auto unlock at passage mode",
				64: "Door unclosed alarm",
				65: "Failed to unlock",
				66: "Failed to lock",
				67: "Face unlock success",
				68: "Face unlock failed - door locked from inside",
				69: "Lock with face",
				70: "Face registration success",
				71: "Face unlock failed - expired or ineffective",
				72: "Delete face success",
				73: "Clear face success",
				74: "IC card unlock failed - CPU secure information error",
				75: "App authorized button unlock success",
				76: "Gateway authorized button unlock success",
				77: "Dual authentication Bluetooth unlock verification success, waiting for second user",
				78: "Dual authentication password unlock verification success, waiting for second user",
				79: "Dual authentication fingerprint unlock verification success, waiting for second user",
				80: "Dual authentication IC card unlock verification success, waiting for second user",
				81: "Dual authentication face card unlock verification success, waiting for second user",
				82: "Dual authentication wireless key unlock verification success, waiting for second user",
				83: "Dual authentication palm vein unlock verification success, waiting for second user",
				84: "Palm vein unlock success",
				85: "Palm vein unlock success",
				86: "Lock with palm vein",
				87: "Register palm vein success",
				88: "Palm vein unlock failed - expired or ineffective",
				89: "Delete palm vein successfully",
				90: "Clear palm vein successfully",
				91: "Failed to unlock with IC card",
				92: "Administrator password to unlock",
				93: "Add password successfully (custom password, keyboard add password)",
			} as Record<number, string>,
		},
		IMAGE: {
			NO_IMAGE_PROVIDED: "No image provided",
			UPLOAD_FAILED: "Image upload failed",
			PUBLIC_ID_REQUIRED: "Public ID is required",
			NOT_FOUND: "Image not found",
			DELETE_FAILED: "Image deletion failed",
			PUBLIC_IDS_REQUIRED: "Public IDs are required",
			TRANSFORM_FAILED: "Image transformation failed",
		},
		INTEGRATION: {
			ORGANIZATION_ID_REQUIRED: "Name, provider, and organization ID are required",
			CONFIGURATION_MUST_BE_OBJECT: "Configuration must be an object",
			ORGANIZATION_NOT_FOUND: "Organization not found",
			ERROR_CREATING: "Error creating integration",
			INTERNAL_SERVER_ERROR: "Internal server error",
			MISSING_ID: "Missing integration ID",
			ID_REQUIRED: "Integration ID is required",
			INVALID_FIELDS: "Invalid fields parameter",
			FIELDS_MUST_BE_STRING: "Fields must be a string",
			NOT_FOUND: "Integration not found",
			ERROR_GETTING: "Error getting integration",
			ERROR_UPDATING: "Error updating integration",
			ERROR_DELETING: "Error deleting integration",
			CREATING_NEW: "Creating new integration",
			CREATED: "Integration created successfully",
			GETTING_ALL: "Getting all integrations",
			GETTING_BY_ID: "Getting integration by ID",
			RETRIEVED: "Integration retrieved successfully",
			UPDATING: "Updating integration",
			UPDATE: "Integration updated successfully",
			DELETING: "Deleting integration",
			DELETED: "Integration soft deleted successfully",
		},
		MODULE: {
			MISSING_ID: "Missing module ID",
			ID_REQUIRED: "Module ID is required",
			FIELDS_MUST_BE_STRING: "Fields parameter must be a string",
			NOT_FOUND: "Module not found",
			ERROR_GETTING: "Error getting module",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_ALL: "Error getting all modules",
			NAME_REQUIRED: "Module name is required",
			DESCRIPTION_REQUIRED: "Module description is required",
			CODE_REQUIRED: "Module code is required",
			TYPE_REQUIRED: "Module type is required",
			APP_ID_REQUIRED: "App ID is required",
			APP_NOT_FOUND: "App not found",
			NAME_OR_CODE_EXISTS: "Module with this name or code already exists",
			ERROR_CREATING: "Error creating module",
			NO_UPDATE_FIELDS: "No update fields provided",
			ERROR_UPDATING: "Error updating module",
			ERROR_DELETING: "Error deleting module",
			GETTING_BY_ID: "Getting module by ID",
			RETRIEVED: "Module retrieved successfully",
			GETTING_ALL: "Getting all modules",
			CREATED: "Module created successfully",
			UPDATING: "Updating module",
			UPDATED: "Module updated successfully",
			DELETING: "Deleting module",
			DELETED: "Module deleted successfully",
		},
		AUTH: {
			UNAUTHORIZED: "Unauthorized",
			INVALID_TOKEN: "Invalid token",
			REGISTRATION_VALIDATION_FAILED: "Registration validation failed",
			LOGIN_VALIDATION_FAILED: "Login validation failed",
			PASSWORD_UPDATE_VALIDATION_FAILED: "Password update validation failed",
			FIRST_NAME_LAST_NAME_REQUIRED: "First name and last name are required",
			INVALID_ORGANIZATION_ID_FORMAT: "Invalid organization ID format",
			ORGANIZATION_NOT_FOUND: "Organization not found",
			USER_ALREADY_EXISTS: "User already exists",
			ERROR_DURING_REGISTRATION: "Error during registration",
			INVALID_CREDENTIALS: "Invalid credentials",
			ERROR_DURING_LOGIN: "Error during login",
			USER_ID_PASSWORD_REQUIRED: "User ID and new password are required",
			PASSWORD_MIN_LENGTH: "Password must be at least 6 characters long",
			ERROR_UPDATING_PASSWORD: "Error updating password",
			USER_NOT_FOUND: "User not found",
			REGISTRATION_SUCCESSFUL: "Registration successful",
			LOGGED_IN_SUCCESSFULLY: "Logged in successfully",
			PASSWORD_UPDATED_SUCCESSFULLY: "Password updated successfully",
			FAILED_TO_CREATE_OR_FIND_PERSON: "Failed to create or find person",
			ORGANIZATION_VERIFIED: "Organization verified",
			TOKEN_GENERATED: "Token generated successfully",
			USER_LOGGED_IN: "User logged in successfully",
		},
		FACILITY: {
			NOT_FOUND: "Facility not found",
			INTERNAL_SERVER_ERROR: "Internal server error",
		},
		MAINTENANCE: {
			NOT_FOUND: "Maintenance record not found",
			INVALID_ID: "Invalid maintenance record ID",
			MISSING_ID: "Missing maintenance record ID",
			ID_REQUIRED: "Maintenance record ID is required",
			INVALID_FIELDS_PARAMETER: "Invalid fields parameter",
			FIELDS_MUST_BE_STRING: "Fields parameter must be a string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING: "Error getting maintenance record",
			ERROR_GETTING_ALL: "Error getting all maintenance records",
			ERROR_CREATING: "Error creating maintenance record",
			ERROR_UPDATING: "Error updating maintenance record",
			ERROR_DELETING: "Error deleting maintenance record",
			FACILITY_NOT_FOUND: "Facility not found",
			USER_NOT_FOUND: "User not found",
			INVALID_STATUS: "Invalid maintenance status",
			INVALID_DATE_RANGE: "End date cannot be before start date",
			INVALID_COST: "Cost must be a positive number",
			DESCRIPTION_REQUIRED: "Description is required",
			FACILITY_ID_REQUIRED: "Facility ID is required",
			MAINTAINED_BY_ID_REQUIRED: "Maintained by user ID is required",
			DATE_REQUIRED: "Maintenance date is required",
			INVALID_UPDATE_DATA: "Invalid update data",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			REQUEST_BODY_EMPTY: "Request body is empty",
			INVALID_QUERY_PARAMETERS: "Invalid query parameters",
		},
		RESERVATION: {
			NOT_FOUND: "Reservation not found",
			INVALID_ID: "Invalid reservation ID",
			MISSING_ID: "Missing reservation ID",
			RESERVATION_ID_REQUIRED: "Reservation ID is required",
			INVALID_POPULATE: "Invalid populate parameter",
			POPULATE_MUST_BE_STRING: "Populate parameter must be a comma-separated string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_RESERVATION: "Error getting reservation",
			INVALID_PAGE: "Invalid page number",
			INVALID_LIMIT: "Invalid limit number",
			INVALID_ORDER: "Invalid order parameter",
			ORDER_MUST_BE_ASC_OR_DESC: "Order must be either 'asc' or 'desc'",
			INVALID_SELECT: "Invalid select parameter",
			SELECT_MUST_BE_STRING: "Select parameter must be a comma-separated string",
			INVALID_SORT: "Invalid sort parameter",
			SORT_MUST_BE_STRING: "Sort parameter must be a valid JSON string or field name",
			NO_UPDATE_FIELDS: "No update fields provided",
			UPDATE_FAILED: "Failed to update reservation",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required for update",
			ERROR_UPDATING_RESERVATION: "Error updating reservation",
			ERROR_DELETING_RESERVATION: "Error deleting reservation",
			FACILITY_NOT_FOUND: "Facility not found",
			USER_NOT_FOUND: "User not found",
			INVALID_DATE_RANGE: "End date cannot be before start date",
			INVALID_CHECK_IN_DATE: "Check-in date cannot be in the past",
			INVALID_GUESTS_COUNT: "Number of guests must be positive",
			FACILITY_UNAVAILABLE: "Facility is not available for the selected dates",
			OVERLAPPING_RESERVATION: "A reservation already exists for these dates",
			INVALID_STATUS: "Invalid reservation status",
			CANNOT_MODIFY_CHECKED_OUT: "Cannot modify a checked-out reservation",
			CANNOT_MODIFY_CANCELLED: "Cannot modify a cancelled reservation",
			// Additional missing constants
			USER_CREATION_FIELDS_REQUIRED:
				"First name, last name, and email are required for user creation",
			NO_ROOMS_AVAILABLE_FOR_FACILITY_TYPE:
				"No rooms available for the specified facility type",
			STATUS_REQUIRED: "Status is required",
			AUTO_ASSIGNED_DURING_CHECKIN: "Room auto-assigned",
			CANNOT_DELETE_CHECKED_IN: "Cannot delete a checked-in reservation",
			AVAILABILITY_PARAMS_REQUIRED:
				"Facility ID, reservation start date, and reservation end date are required",
			FACILITY_AVAILABLE_MESSAGE: "Facility is available for the selected dates",
			FACILITY_NOT_AVAILABLE_MESSAGE: "Facility is not available for the selected dates",
			DATES_REQUIRED: "Reservation start date and end date are required",
			INVALID_DATE_FORMAT: "Invalid date format",
			END_DATE_BEFORE_START: "End date cannot be before start date",
			ALREADY_HAS_ROOM_ASSIGNED: "Reservation already has a room assigned",
			CANNOT_AUTO_ASSIGN_NO_ROOM_TYPE:
				"Cannot auto-assign room for reservation without room type",
			USING_PREFERRED_FACILITY: "Using preferred facility",
			NO_ROOMS_AVAILABLE_FOR_TYPE: "No rooms available for the specified room type",
			PREFERRED_FACILITY_NOT_AVAILABLE: "Preferred facility not available, using alternative",
			FACILITY_ID_REQUIRED_FOR_MANUAL: "Facility ID is required for manual assignment",
			FACILITY_NOT_AVAILABLE_OR_ACTIVE: "Facility is not available or active",
			FACILITY_TYPE_MISMATCH: "Facility type mismatch",
			SELECTED_FACILITY_NOT_AVAILABLE:
				"Selected facility is not available for the reservation dates",
			NO_FACILITY_COULD_BE_ASSIGNED: "No facility could be assigned to the reservation",
			ROOM_AUTO_ASSIGNED_SUCCESS: "Room auto-assigned successfully",
			ROOM_MANUALLY_ASSIGNED_SUCCESS: "Room manually assigned successfully",
			AUTO_ASSIGNED: "Auto-assigned",
			MANUALLY_ASSIGNED: "Manually assigned",
			ROOM_ASSIGNMENT_CONCURRENT_ACCESS: "Concurrent access detected during room assignment",
		},
		TRANSACTION: {
			NOT_FOUND: "Transaction not found",
			INVALID_ID: "Invalid transaction ID",
			MISSING_ID: "Missing transaction ID",
			ID_REQUIRED: "Transaction ID is required",
			INVALID_ID_FORMAT: "Invalid transaction ID format",
			INVALID_FIELDS_PARAMETER: "Invalid fields parameter",
			FIELDS_MUST_BE_STRING: "Fields parameter must be a string",
			INTERNAL_SERVER_ERROR: "Internal server error",
			ERROR_GETTING_TRANSACTION: "Error getting transaction",
			ERROR_GETTING_ALL_TRANSACTIONS: "Error getting all transactions",
			ERROR_CREATING_TRANSACTION: "Error creating transaction",
			ERROR_UPDATING_TRANSACTION: "Error updating transaction",
			ERROR_DELETING_TRANSACTION: "Error deleting transaction",
			ERROR_COMPLETING_TRANSACTION: "Error completing transaction",
			USER_NOT_FOUND: "User not found",
			RESERVATION_NOT_FOUND: "Reservation not found",
			PROVIDER_REF_ALREADY_EXISTS: "Transaction with this provider reference already exists",
			INVALID_TRANSACTION_DATA: "Invalid transaction data",
			INVALID_UPDATE_DATA: "Invalid update data",
			INVALID_COMPLETION_DATA: "Invalid completion data",
			CANNOT_COMPLETE_NON_PENDING: "Cannot complete non-pending transaction",
			AT_LEAST_ONE_FIELD_REQUIRED: "At least one field is required",
			REQUEST_BODY_EMPTY: "Request body is empty",
			INVALID_QUERY_PARAMETERS: "Invalid query parameters",
		},
	},

	SUCCESS: {
		ORGANIZATION: {
			RETRIEVED: "Organization retrieved successfully",
			DELETED: "Organization deleted successfully",
			UPDATE: "Updating organization",
			CREATED: "Organization created successfully",
			GETTING_BY_ID: "Getting organization by ID",
			GETTING_ALL: "Getting all organizations",
			MODULES_ADDED_TO_APP: "Modules added to existing app successfully",
			APP_AND_MODULES_PURCHASED: "App and modules purchased successfully",
			APP_UPDATED: "Organization app updated successfully",
			APP_REMOVED: "Organization app removed successfully",
			MODULE_REMOVED: "Module removed from app successfully",
			MODULE_UPDATED: "Module updated successfully",
		},
		APP: {
			GETTING_BY_ID: "Getting app by ID",
			RETRIEVED: "App retrieved successfully",
			GETTING_ALL: "Getting all apps",
			CREATED: "App created successfully",
			UPDATING: "Updating app",
			UPDATED: "App updated successfully",
			DELETING: "Deleting app",
			DELETED: "App deleted successfully",
		},
		USER: {
			RETRIEVED: "User retrieved successfully",
			DELETED: "User deleted",
			SOFT_DELETING: "Soft deleting user",
			UPDATE: "User updated",
			CREATED: "User created",
			LOGGED_IN: "User logged in",
			GETTING_USER_BY_ID: "Getting user by ID",
			GETTING_ALL_USERS: "Getting all users",
			LOGOUT_SUCCESSFUL: "Logout successful",
			PASSWORD_RESET_EMAIL_SENT: "Password reset email sent",
			PASSWORD_RESET_SUCCESSFUL: "Password reset successful",
			USER_UPDATED_SUCCESSFULLY: "User updated successfully",
			USERS_RETRIEVED_SUCCESSFULLY: "Users retrieved successfully",
			CURRENT_USER_RETRIEVED_SUCCESSFULLY: "Current user retrieved successfully",
			USER_CREATED_SUCCESSFULLY: "User created successfully",
		},
		AUTH: {
			REGISTRATION_SUCCESSFUL: "Registration successful",
			LOGGED_IN_SUCCESSFULLY: "Logged in successfully",
			PASSWORD_UPDATED_SUCCESSFULLY: "Password updated successfully",
			USER_CREATED: "User created successfully",
			TOKEN_GENERATED: "Token generated successfully",
			ORGANIZATION_VERIFIED: "Organization verified successfully",
			USER_LOGGED_IN: "User logged in successfully",
		},
		PERSON: {
			RETRIEVED: "Person retrieved",
			DELETED: "Person deleted",
			SOFT_DELETING: "Soft deleting user",
			UPDATE: "Person updated",
			CREATED: "Person created",
			LOGGED_IN: "Person logged in",
			GETTING_USER_BY_ID: "Getting person by ID",
			GETTING_ALL_USERS: "Getting all persons",
		},
		ROOMTYPE: {
			RETRIEVED: "Room type retrieved",
			DELETED: "Room type deleted",
			UPDATE: "Room type updated",
			CREATED: "Room type created",
			GETTING_BY_ID: "Getting room type by ID",
			GETTING_ALL: "Getting all room types",
		},
		CLIENT: {
			RETRIEVED: "Client retrieved",
			DELETED: "Client deleted",
			SOFT_DELETING: "Soft deleting user",
			UPDATE: "Client updated",
			CREATED: "Client created",
			LOGGED_IN: "Client logged in",
			GETTING_USER_BY_ID: "Getting client by ID",
			GETTING_ALL_USERS: "Getting all clients",
		},
		VENDOR: {
			RETRIEVED: "Vendor retrieved",
			DELETED: "Vendor deleted",
			SOFT_DELETING: "Soft deleting vendor",
			UPDATE: "Vendor updated",
			CREATED: "Vendor created",
			LOGGED_IN: "Vendor logged in",
			GETTING_USER_BY_ID: "Getting vendor by ID",
			GETTING_ALL_USERS: "Getting all vendors",
		},
		REFERRER: {
			RETRIEVED: "Referrer retrieved",
			DELETED: "Referrer deleted",
			SOFT_DELETING: "Soft deleting referrer",
			UPDATE: "Referrer updated",
			CREATED: "Referrer created",
			GETTING_USER_BY_ID: "Getting referrer by ID",
			GETTING_ALL_USERS: "Getting all referrers",
		},
		TTLOCK: {
			CALLBACK: "Callback received and record saved successfully",
			GETTING_ALL_USERS: "Successfully retrieved TTLock users",
			CREATING_NEW_USER: "Successfully created TTLock user:",
			LOGGING_IN: "Successfully logged in TTLock user:",
			RESET_PASSWORD: "Successfully reset password for TTLock user:",
			DELETING_USER: "Successfully deleted TTLock user:",
			GET_UNLOCK_RECORDS: "Successfully retrieved",
			UPLOADING_UNLOCK_RECORDS: "Successfully uploaded",
			DELETING_UNLOCK_RECORDS: "Successfully deleted",
			CLEARING_UNLOCK_RECORDS: "Successfully cleared",
			LISTING_QR_CODES: "Successfully listed QR codes for lock ID: ",
			ADDING_QR_CODE: "Successfully added QR code for lock ID: ",
			GETTING_QR_CODE_DATA: "Successfully got QR code data for ID:",
			DELETING_QR_CODE: "Successfully deleted QR code ID:",
			CLEARING_QR_CODES: "Successfully cleared QR codes for lock ID:",
			UPDATING_QR_CODE: "Successfully updated QR code ID:",
			GETTING_PASSCODES: "Successfully retrieved passcodes for lock ID:",
			GENERATING_PASSCODE: "Successfully generated random passcode for lock ID:",
			DELETING_PASSCODE: "Successfully deleted passcode ID:",
			CHANGING_PASSCODE: "Successfully changed passcode ID:",
			ADDING_PASSCODE: "Successfully added new passcode for lock ID:",
			INITIALIZING_LOCK: "Successfully initialized lock",
			GETTING_LOCK: "Successfully retrieved lock details",
			GETTING_ALL_LOCKS: "Successfully retrieved all locks",
			LOCKING: "Successfully performed lock action",
			UPDATING_LOCK: "Successfully updated lock",
			DELETING_LOCK: "Successfully deleted lock",
			DELETING_ALL_LOCKS: "Successfully deleted all locks",
			CONFIGURING_PASSAGE_MODE: "Successfully configured passage mode",
			ADDING_IC_CARD: "Successfully added IC card",
			GETTING_IC_CARD_LIST: "Successfully retrieved IC card list",
			DELETING_IC_CARD: "Successfully deleted IC card",
			CLEARING_IC_CARDS: "Successfully cleared all IC cards",
			UPDATING_IC_CARD: "Successfully updated IC card",
			ADDING_GROUP: "Successfully added group",
			GETTING_GROUP_LIST: "Successfully retrieved group list",
			UPDATING_GROUP: "Successfully updated group",
			DELETING_GROUP: "Successfully deleted group",
			SETTING_LOCK_GROUP: "Successfully set lock to group",
			INITIALIZING_GATEWAY: "Successfully initialized gateway",
			GETTING_ALL_GATEWAYS: "Successfully retrieved all gateways",
			DELETING_GATEWAY: "Successfully deleted gateway",
			GETTING_GATEWAY: "Successfully retrieved gateway details",
			UPDATING_GATEWAY: "Successfully updated gateway",
			UPLOADING_GATEWAY_DETAILS: "Successfully uploaded gateway details",
			GETTING_FINGERPRINT_LIST: "Successfully retrieved fingerprint list",
			ADDING_FINGERPRINT: "Successfully added fingerprint",
			DELETING_FINGERPRINT: "Successfully deleted fingerprint",
			CLEARING_FINGERPRINTS: "Successfully cleared all fingerprints",
			UPDATING_FINGERPRINT: "Successfully updated fingerprint",
			SENDING_EKEY: "Successfully sent ekey",
			DELETING_EKEY: "Successfully deleted ekey",
			LISTING_EKEYS: "Successfully retrieved ekey list",
			GETTING_EKEY: "Successfully retrieved ekey",
			GETTING_LOCK_EKEY: "Successfully retrieved lock ekey list",
			UPDATING_EKEY: "Successfully updated ekey",
			QUERYING_LOCK_STATE: "Successfully queried lock state",
			QUERYING_LOCK_SETTING: "Successfully queried lock setting",
			// Door Sensor Success Messages
			ADDING_DOOR_SENSOR: "Successfully added door sensor",
			QUERYING_DOOR_SENSOR: "Successfully queried door sensor",
			DELETING_DOOR_SENSOR: "Successfully deleted door sensor",
			RENAMING_DOOR_SENSOR: "Successfully renamed door sensor",
			GETTING_GATEWAY_LIST_BY_LOCK: "Successfully got gateway list by lock",
			GETTING_PASSAGE_MODE_CONFIG: "Successfully got passage mode configuration",
			UPDATING_LOCK_SETTING: "Successfully updated lock setting",
		},
		IMAGE: {
			UPLOADED: "Image uploaded successfully",
			MULTIPLE_UPLOADED: "images uploaded successfully",
			DELETED: "Image deleted successfully",
			DELETION_COMPLETED: "Deletion completed",
			TRANSFORMED: "Image transformed successfully",
		},
		INTEGRATION: {
			CREATING_NEW: "Creating new integration",
			CREATED: "Integration created successfully",
			GETTING_ALL: "Getting all integrations",
			GETTING_BY_ID: "Getting integration by ID",
			RETRIEVED: "Integration retrieved successfully",
			UPDATING: "Updating integration",
			UPDATE: "Integration updated successfully",
			DELETING: "Deleting integration",
			DELETED: "Integration soft deleted successfully",
		},
		MODULE: {
			GETTING_BY_ID: "Getting module by ID",
			RETRIEVED: "Module retrieved successfully",
			GETTING_ALL: "Getting all modules",
			CREATED: "Module created successfully",
			UPDATING: "Updating module",
			UPDATED: "Module updated successfully",
			DELETING: "Deleting module",
			DELETED: "Module deleted successfully",
		},
		FACILITY: {
			CREATED: "Facility created successfully",
			RETRIEVED: "Facility retrieved successfully",
			RETRIEVED_ALL: "All facilities retrieved successfully",
			UPDATED: "Facility updated successfully",
			DELETED: "Facility deleted successfully",
		},
		MAINTENANCE: {
			CREATED: "Maintenance record created successfully",
			RETRIEVED: "Maintenance record retrieved successfully",
			RETRIEVED_ALL: "All maintenance records retrieved successfully",
			UPDATED: "Maintenance record updated successfully",
			DELETED: "Maintenance record deleted successfully",
			GETTING_BY_ID: "Getting maintenance record by ID",
			GETTING_ALL: "Getting all maintenance records",
			UPDATING: "Updating maintenance record",
			DELETING: "Deleting maintenance record",
		},
		RESERVATION: {
			CREATED: "Reservation created successfully",
			RETRIEVED: "Reservation retrieved successfully",
			RETRIEVED_ALL: "All reservations retrieved successfully",
			UPDATED: "Reservation updated successfully",
			DELETED: "Reservation deleted successfully",
			GETTING_BY_ID: "Getting reservation by ID",
			GETTING_ALL: "Getting all reservations",
			UPDATING: "Updating reservation",
			DELETING: "Deleting reservation",
			CHECKED_IN: "Guest checked in successfully",
			CHECKED_OUT: "Guest checked out successfully",
			CANCELLED: "Reservation cancelled successfully",
		},
		TRANSACTION: {
			CREATED: "Transaction created successfully",
			RETRIEVED: "Transaction retrieved successfully",
			RETRIEVED_ALL: "Transactions retrieved successfully",
			UPDATED: "Transaction updated successfully",
			DELETED: "Transaction deleted successfully",
			COMPLETED: "Transaction completed successfully",
			GETTING_BY_ID: "Getting transaction by ID",
			GETTING_ALL: "Getting all transactions",
			UPDATING: "Updating transaction",
			DELETING: "Soft deleting transaction",
		},
	},
	INFO: {
		USER: {
			REGISTERING_USER: "Registering user with email:",
			CREATING_USER_WITH_PERSON_ID: "Creating user with personId:",
			LOGGING_IN_USER: "Logging in user with email:",
		},
		TTLOCK: {
			GETTING_ALL_USERS: "Getting all TTLock users, page:",
			CREATING_NEW_USER: "Creating new TTLock user:",
			ATTEMPTING_LOGIN: "Attempting login for TTLock user:",
			RESET_PASSWORD: "Resetting password for TTLock user:",
			DELETING_USER: "Deleting TTLock user:",
			GETTING_UNLOCK_RECORDS: "Getting unlock records for lock:",
			UPLOADING_UNLOCK_RECORDS: "Uploading unlock records for lock:",
			DELETING_UNLOCK_RECORDS: "Deleting unlock records for lock:",
			CLEARING_UNLOCK_RECORDS: "Clearing unlock records for lock:",
			LISTING_QR_CODES: "Listing QR codes for lock:",
			ADDING_QR_CODE: "Adding QR code for lock:",
			GETTING_QR_CODE_DATA: "Getting QR code data for ID:",
			DELETING_QR_CODE: "Deleting QR code ID:",
			CLEARING_QR_CODES: "Clearing all QR codes for lock ID:",
			UPDATING_QR_CODE: "Updating QR code ID:",
			GETTING_PASSCODES: "Getting passcodes for lock ID:",
			GENERATING_PASSCODE: "Getting random passcode for lock ID:",
			DELETING_PASSCODE: "Deleting passcode ID:",
			CHANGING_PASSCODE: "Changing passcode ID:",
			ADDING_PASSCODE: "Adding new passcode for lock ID:",
			INITIALIZING_LOCK: "Initializing lock with data:",
			GETTING_LOCK: "Getting lock details for lockId:",
			GETTING_ALL_LOCKS: "Getting all locks with action:",
			LOCKING: "Performing lock action:",
			UPDATING_LOCK: "Updating lock with action:",
			DELETING_LOCK: "Deleting lock with action:",
			DELETING_ALL_LOCKS: "Deleting all locks for lockId:",
			CONFIGURING_PASSAGE_MODE: "Configuring passage mode",
			ADDING_IC_CARD: "Adding IC card",
			GETTING_IC_CARD_LIST: "Getting IC card list",
			DELETING_IC_CARD: "Deleting IC card",
			CLEARING_IC_CARDS: "Clearing all IC cards",
			UPDATING_IC_CARD: "Updating IC card",
			ADDING_GROUP: "Adding new group",
			GETTING_GROUP_LIST: "Getting group list",
			UPDATING_GROUP: "Updating group",
			DELETING_GROUP: "Deleting group",
			SETTING_LOCK_GROUP: "Setting lock to group",
			INITIALIZING_GATEWAY: "Initializing gateway",
			GETTING_ALL_GATEWAYS: "Getting all gateways",
			DELETING_GATEWAY: "Deleting gateway",
			GETTING_GATEWAY: "Getting gateway details",
			UPDATING_GATEWAY: "Updating gateway",
			UPLOADING_GATEWAY_DETAILS: "Uploading gateway details",
			GETTING_FINGERPRINT_LIST: "Getting fingerprint list",
			ADDING_FINGERPRINT: "Adding fingerprint",
			DELETING_FINGERPRINT: "Deleting fingerprint",
			CLEARING_FINGERPRINTS: "Clearing all fingerprints",
			UPDATING_FINGERPRINT: "Updating fingerprint",
			SENDING_EKEY: "Sending ekey",
			DELETING_EKEY: "Deleting ekey",
			LISTING_EKEYS: "Getting ekey list",
			GETTING_EKEY: "Getting ekey",
			GETTING_LOCK_EKEY: "Getting lock ekey list",
			UPDATING_EKEY: "Updating ekey",
			QUERYING_LOCK_STATE: "Querying lock state for lockId:",
			QUERYING_LOCK_SETTING: "Querying lock setting",
			// Door Sensor Info Messages
			ADDING_DOOR_SENSOR: "Adding door sensor",
			QUERYING_DOOR_SENSOR: "Querying door sensor",
			DELETING_DOOR_SENSOR: "Deleting door sensor",
			RENAMING_DOOR_SENSOR: "Renaming door sensor",
			GETTING_GATEWAY_LIST_BY_LOCK: "Getting gateway list by lock",
			GETTING_PASSAGE_MODE_CONFIG: "Getting passage mode configuration",
			UPDATING_LOCK_SETTING: "Updating lock setting",
		},
		TRANSACTION: {
			GETTING_BY_ID: "Getting transaction by ID:",
			CREATING_FOR_USER: "Creating transaction for user:",
			UPDATING: "Updating transaction:",
			DELETING: "Soft deleting transaction:",
			COMPLETED: "Transaction completed:",
			COMPLETING_PENDING: "Completing pending transaction:",
			RETRIEVED: "Transaction retrieved:",
			CREATED: "Transaction created:",
			UPDATED: "Transaction updated:",
			DELETED: "Transaction deleted:",
			RETRIEVED_COUNT: "Retrieved transactions",
			GETTING_ALL: "Getting all transactions",
		},
	},
	COMMON: {
		UNLOCK_RECORDS: "unlock records",
		SIZE: "size",
		PAGE: "page",
		QUERY: "query",
		FILTER: "filter",
		ORDER: "order",
		STATUS: "status",
		RESPONSE: "response",
		FROM: "from",
		WITH: "with",
		TO: "to",
		FOR: "for",
		ACTION: "action",
		// Common field names
		ID: "id",
		EMAIL: "email",
		FIRST_NAME: "firstName",
		LAST_NAME: "lastName",
		ORGANIZATION_ID: "organizationId",
		USER_ID: "userId",
		BODY: "body",
		FIELDS: "fields",
		// Common resource names
		USER: "User",
		ORGANIZATION: "Organization",
		// Common values
		USERS: "users",
		AVATARS: "avatars",
		AUTO: "auto",
		AVATAR: "avatar",
		EMAIL_METHOD: "email",
		// HTTP methods
		GET: "GET",
		POST: "POST",
		PUT: "PUT",
		DELETE: "DELETE",
		PATCH: "PATCH",
		// Common actions
		DETAILS: "details",
		BATTERY: "battery",
		PASSAGE_MODE: "passageMode",
		LOCKLIST: "locklist",
		PASSCODES: "passcodes",
		LIST_USER: "listuser",
		LOCK: "lock",
		// Common parameters
		START_DATE: "startDate",
		END_DATE: "endDate",
		ORDER_BY: "orderBy",
		DESC: "desc",
		// Common error codes
		UNAUTHORIZED: "UNAUTHORIZED",
		INTERNAL_SERVER_ERROR: "Internal server error",
		// Cookie settings
		TOKEN: "token",
		NONE: "none",
		LAX: "lax",
		PRODUCTION: "production",
	},
	ACTION: {
		CREATE: "create",
		READ: "read",
		UPDATE: "update",
		DELETE: "delete",
		CUSTOM: "custom",
	},
	MODULES: {
		FRONT_DESK: "frontdesk",
		RESERVATION: "reservation",
		TTLOCK: "ttlock",
	},
	TYPE: {
		DMS: "dms",
		HMS: "hms",
	},
	ERROR_MAPPING: {
		ROOM_ASSIGNMENT: {
			"Reservation not found": { status: 404, message: "Reservation not found" },
			"Facility not found": { status: 404, message: "Facility not found" },
			"No available rooms for the specified room type and dates": {
				status: 409,
				message:
					"No rooms available for the specified room type and dates. Please try a different room type or dates.",
			},
			"Selected facility is not available for the reservation dates": {
				status: 409,
				message: "Selected facility is not available for the reservation dates",
			},
			"Facility is not available or active": {
				status: 400,
				message: "Facility is not available or active",
			},
			"Reservation is not for a room type, cannot auto-assign": {
				status: 400,
				message: "Reservation is not for a room type, cannot auto-assign",
			},
			"facilityId is required when autoAssign is not true": {
				status: 400,
				message: "facilityId is required when autoAssign is not true",
			},
			"No facility could be assigned to the reservation": {
				status: 500,
				message: "No facility could be assigned to the reservation",
			},
		} as Record<string, { status: number; message: string }>,
	},
};
