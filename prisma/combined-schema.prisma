// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
}

datasource db {
  provider        = "mongodb"
  url             = env("DATABASE_URL")
}


// From user.prisma
enum Role {
  superadmin
  viewer
  admin
  onebis_test
  hms_user
  hms_viewer
  hms_admin
  hms_frontdesk_user
  hms_frontdesk_viewer
  hms_frontdesk_admin
  hms_reservation_user
  hms_reservation_viewer
  hms_reservation_admin
  hms_dining_user
  hms_dining_viewer
  hms_dining_admin
  dms_user
  dms_viewer
  dms_admin
  dms_ttlock_user
  dms_ttlock_viewer
  dms_ttlock_admin
  dms_hr_user
  dms_hr_viewer
  dms_hr_admin
  dms_grms_user
  dms_grms_viewer
  dms_grms_admin
  guest
}

enum SubRole {
  staff
  guard
  vendor
  operator
  manager
  guest
}

enum Status {
  active
  inactive
  suspended
  archived
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  personId            String               @db.ObjectId
  person              Person               @relation(fields: [personId], references: [id], onDelete: Cascade)
  avatar              String?
  userName            String               @unique
  email               String               @unique
  password            String?
  role                Role
  subRole             SubRole?
  organization        Organization?        @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId      String?              @db.ObjectId
  status              Status               @default(active)
  isDeleted           Boolean              @default(false)
  lastLogin           DateTime?
  loginMethod         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([role], name: "idx_user_role")
  @@index([status], name: "idx_user_status")
  @@index([organizationId], name: "idx_user_organization")
  @@index([personId], name: "idx_user_person")
  @@index([isDeleted], name: "idx_user_deleted")
  @@index([lastLogin], name: "idx_user_last_login")
  @@index([createdAt], name: "idx_user_created_at")
  @@index([role, status], name: "idx_user_role_status")
  @@index([organizationId, status], name: "idx_user_org_status")
  @@index([organizationId, role], name: "idx_user_org_role")
  @@index([isDeleted, status], name: "idx_user_deleted_status")
}


// From person.prisma
enum GenderType {
  male
  female
  other
  prefer_not_to_say
  unknown
  not_applicable
}

enum PhoneType {
  mobile
  home
  work
  emergency
  fax
  pager
  main
  other
}

enum IdentificationType {
  passport
  drivers_license
  national_id
  postal_id
  voters_id
  senior_citizen_id
  company_id
  school_id
}

type PersonalInfo {
  prefix          String? // Added: Mr., Ms., Dr., etc.
  firstName       String
  middleName      String? // Added: Middle name
  lastName        String
  dateOfBirth     DateTime?
  placeOfBirth    String?
  age             Int?
  nationality     String?
  primaryLanguage String?
  gender          GenderType?
  currency        String? // Added: Preferred currency (USD, EUR, etc.)
  vipCode         String? // Added: VIP status code
}

type Phone {
  type        PhoneType?
  countryCode String?
  number      String?
  isPrimary   Boolean?
}

type ContactAddress {
  street      String? // address1
  address2    String? // Added: Second address line
  city        String?
  state       String?
  country     String?
  postalCode  String?
  zipCode     String?
  houseNumber String?
}

type ContactInfo {
  email   String?
  phones  Phone[]
  fax     String? // Added: Separate fax field
  address ContactAddress?
}

type Identification {
  type           IdentificationType?
  number         String?
  issuingCountry String?
  expiryDate     DateTime?
}

type Metadata {
  isActive    Boolean   @default(true)
  status      String? // TODO: Define enum based on config.ENUMS.PERSON.PERSON_STATUS
  createdBy   String?   @db.ObjectId // Should reference a User id
  updatedBy   String?   @db.ObjectId // Should reference a User id
  lastLoginAt DateTime?
  isDeleted   Boolean   @default(false) // Moved from root
}

model Person {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String?         @db.ObjectId
  personalInfo   PersonalInfo?
  contactInfo    ContactInfo?
  identification Identification?
  metadata       Metadata?
  users User[]

  @@index([organizationId], name: "idx_person_organization")
  @@index([metadata.isDeleted], name: "idx_person_deleted")
  @@index([metadata.status], name: "idx_person_status")
  @@index([metadata.isActive], name: "idx_person_active")
  @@index([metadata.lastLoginAt], name: "idx_person_last_login")
  @@index([personalInfo.firstName], name: "idx_person_first_name")
  @@index([personalInfo.lastName], name: "idx_person_last_name")
  @@index([personalInfo.gender], name: "idx_person_gender")
  @@index([personalInfo.nationality], name: "idx_person_nationality")
  @@index([contactInfo.email], name: "idx_person_email")
  @@index([identification.type], name: "idx_person_id_type")
  @@index([identification.number], name: "idx_person_id_number")
  @@index([organizationId, metadata.isDeleted], name: "idx_person_org_deleted")
  @@index([organizationId, metadata.status], name: "idx_person_org_status")
  @@index([metadata.isDeleted, metadata.status], name: "idx_person_deleted_status")
}


// From organization.prisma
type Colors {
  primary   String?
  secondary String?
  accent    String?
  success   String?
  warning   String?
  danger    String?
  info      String?
  light     String?
  dark      String?
  neutral   String?
}

type Branding {
  logo       String?
  background String?
  font       String?
  colors     Colors?
}

type PurchasedModule {
  moduleId         String? // Reference to the original module if needed
  purchaseDate     DateTime  @default(now())
  licenseStartDate DateTime  @default(now())
  licenseEndDate   DateTime?
  isActive         Boolean   @default(true)
}

type PurchasedApp {
  appId            String? // Reference to the original app if needed
  modules          PurchasedModule[]
  purchaseDate     DateTime          @default(now())
  licenseStartDate DateTime          @default(now())
  licenseEndDate   DateTime?
  isActive         Boolean           @default(true)
}

type IntegrationConfig {
  integrationId String
  configuration Json
  isActive      Boolean @default(true)
}

model Organization {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  code              String
  branding          Branding?
  integrations      IntegrationConfig[]
  isDeleted         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             User[]
  apps              PurchasedApp[]

  @@index([code], name: "idx_organization_code")
  @@index([name], name: "idx_organization_name")
  @@index([isDeleted], name: "idx_organization_deleted")
  @@index([createdAt], name: "idx_organization_created_at")
  @@index([code, isDeleted], name: "idx_organization_code_deleted")
}


// From role.prisma
model UserRole {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


